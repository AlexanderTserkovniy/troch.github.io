<?xml version="1.0" encoding="UTF-8"?>
<rss xmlns:dc="http://purl.org/dc/elements/1.1/" xmlns:content="http://purl.org/rss/1.0/modules/content/" xmlns:atom="http://www.w3.org/2005/Atom" version="2.0"><channel><title><![CDATA[React and be thankful]]></title><description><![CDATA[A blog about building (reactive) web applications]]></description><link>http://blog.reactandbethankful.com</link><generator>metalsmith-feed</generator><lastBuildDate>Fri, 01 May 2015 15:05:58 GMT</lastBuildDate><atom:link href="http://blog.reactandbethankful.com/rss.xml" rel="self" type="application/rss+xml"/><author><![CDATA[Thomas Roch]]></author><item><title><![CDATA[Tour of Node building tools]]></title><description><![CDATA[<p>In this series of articles, we&#39;ll explore popular Node based tools for building web applications.
Although <code>npm</code> itself can be used for build automation (see <a href="http://blog.keithcirkel.co.uk/how-to-use-npm-as-a-build-tool/">&quot;How to use npm as a build tool&quot;</a>),
we will focus on specialised npm packages: <code>grunt</code>, <code>gulp</code> and <code>broccoli</code>. We will try to understand what problems they solve, how to use them
and what their limitations are.</p>]]></description><link>http://blog.reactandbethankful.com/posts/2015/04/18/tour-of-node-building-tools</link><guid isPermaLink="true">http://blog.reactandbethankful.com/posts/2015/04/18/tour-of-node-building-tools</guid><dc:creator><![CDATA[Thomas Roch]]></dc:creator><pubDate>Sat, 18 Apr 2015 12:00:00 GMT</pubDate></item><item><title><![CDATA[Building with Grunt Part 1]]></title><description><![CDATA[<p><a href="http://www.gruntjs.com">Grunt</a> is (or was) not <em>per se</em> a build automation tool. Or at least, This is how Grunt describe itself: <em>&quot;The JavaScript task runner&quot;</em>.
So what is exactly Grunt? Since 4.0, Grunt is definitely a task runner... running tasks for automating builds!</p>]]></description><link>http://blog.reactandbethankful.com/posts/2015/04/18/building-with-grunt-part-1</link><guid isPermaLink="true">http://blog.reactandbethankful.com/posts/2015/04/18/building-with-grunt-part-1</guid><dc:creator><![CDATA[Thomas Roch]]></dc:creator><pubDate>Sat, 18 Apr 2015 14:00:00 GMT</pubDate></item><item><title><![CDATA[Building with Grunt Part 2 Caveats]]></title><description><![CDATA[<p>In <a href="/posts/2015/04/18/building-with-grunt-part-1/">Building with Grunt Part 1</a>, we briefly talked about Grunt <em>&quot;configuration over code&quot;</em> approcah and its limitations (<strong>maintainability</strong>).
There is also another aspect of Grunt which doesn&#39;t make it the ideal build tool: <code>plugins</code> (tasks) are ranked higher than files. In other words: instead of performing a series
of operations on a group of files, we can only perform an operation (<code>task</code>) on different groups of files (<code>targets</code>). The consequences of this are:</p>]]></description><link>http://blog.reactandbethankful.com/posts/2015/04/22/building-with-grunt-part-2-caveats</link><guid isPermaLink="true">http://blog.reactandbethankful.com/posts/2015/04/22/building-with-grunt-part-2-caveats</guid><dc:creator><![CDATA[Thomas Roch]]></dc:creator><pubDate>Wed, 22 Apr 2015 00:00:00 GMT</pubDate></item><item><title><![CDATA[Building with Gulp 3 and 4 Part 1 Examples]]></title><description><![CDATA[<p>Like <a href="/posts/2015/04/18building-with-grunt-part-1/">Grunt</a>, <a href="http://gulpjs.com">Gulp</a> is also a task runner but is designed to build applications using streams:
Gulp is <strong>&quot;the streaming build system&quot;</strong> to <strong>&quot;automate and enhance your workflow&quot;</strong>.</p>]]></description><link>http://blog.reactandbethankful.com/posts/2015/04/23/building-with-gulp-3-and-4-part-1-examples</link><guid isPermaLink="true">http://blog.reactandbethankful.com/posts/2015/04/23/building-with-gulp-3-and-4-part-1-examples</guid><dc:creator><![CDATA[Thomas Roch]]></dc:creator><pubDate>Wed, 22 Apr 2015 23:00:00 GMT</pubDate></item><item><title><![CDATA[Building with Gulp 3 and 4 Part 2 Gulp Anatomy]]></title><description><![CDATA[<p>Gulp itself is a pretty bare package: it integrates a few packages to create a simple but performant tool by exposing an API and adding a CLI.
The packages Gulp is composed of are from the same authors and embrace the <em>single responsability</em> and <em>separation of concerns</em> principles: Gulp parts are <em>loosely coupled</em>,
are individually tested to ensure they fulfill their duties and can easily be re-used in other projects. These principles are also the main guidelines for Gulp plugins:
do one thing and do it well!</p>]]></description><link>http://blog.reactandbethankful.com/posts/2015/04/23/building-with-gulp-3-and-4-part-2-gulp-anatomy</link><guid isPermaLink="true">http://blog.reactandbethankful.com/posts/2015/04/23/building-with-gulp-3-and-4-part-2-gulp-anatomy</guid><dc:creator><![CDATA[Thomas Roch]]></dc:creator><pubDate>Thu, 23 Apr 2015 16:00:00 GMT</pubDate></item><item><title><![CDATA[Building with Gulp 3 and 4 Part 3 Writing transformers]]></title><description><![CDATA[<p>When building with Gulp, we rely on available plugins for <em>atomic or specific operations</em> (like adding a file header or footer, concatenating files, ...). But what if
there is no plugin for what you are trying to achieve? It is fairly simply to write a custom stream transformer, and if you think it can benefit others then publish
your gulp plugin using npm. Make sure you first read the <a href="https://github.com/gulpjs/gulp/blob/master/docs/writing-a-plugin/guidelines.md">guidelines</a>.</p>]]></description><link>http://blog.reactandbethankful.com/posts/2015/04/28/building-with-gulp-3-and-4-part-3-writing-transformers</link><guid isPermaLink="true">http://blog.reactandbethankful.com/posts/2015/04/28/building-with-gulp-3-and-4-part-3-writing-transformers</guid><dc:creator><![CDATA[Thomas Roch]]></dc:creator><pubDate>Tue, 28 Apr 2015 22:30:00 GMT</pubDate></item><item><title><![CDATA[Building with Gulp 4 Part 4 Incremental builds]]></title><description><![CDATA[<p>When it comes to building an application, developers don&#39;t want to have to run a build script all the time a change is made. Build tools like Grunt, Gulp or Broccoli provide file watch capabilities to help rebuilding an application if a change is detected. But rebuilding can bring performance penalties and instead many file operations could be avoided by limiting build operations to a minimum. Sounds nice? That is what incremental builds are about.</p>]]></description><link>http://blog.reactandbethankful.com/posts/2015/05/01/building-with-gulp-4-part-4-incremental-builds</link><guid isPermaLink="true">http://blog.reactandbethankful.com/posts/2015/05/01/building-with-gulp-4-part-4-incremental-builds</guid><dc:creator><![CDATA[Thomas Roch]]></dc:creator><pubDate>Fri, 01 May 2015 15:00:00 GMT</pubDate></item><item><title><![CDATA[How to Install Gulp 4]]></title><description><![CDATA[<p><a href="https://github.com/gulpjs/gulp">Gulp 4</a> is not released yet and if you cannot wait to get your hands on it, here is how to install Gulp 4.</p>]]></description><link>http://blog.reactandbethankful.com/posts/2015/05/01/how-to-install-gulp-4</link><guid isPermaLink="true">http://blog.reactandbethankful.com/posts/2015/05/01/how-to-install-gulp-4</guid><dc:creator><![CDATA[Thomas Roch]]></dc:creator><pubDate>Fri, 01 May 2015 16:00:00 GMT</pubDate></item></channel></rss>